import json

from django.core.exceptions import ValidationError
from django.db import models
from django.template import engines
from django import forms
from django.conf import settings
from django.template import Context
from django.core.validators import validate_email
from django.core.mail import EmailMessage, mail_admins
from content.models import SiteElement
import os


def create_form_table(form):
    s = u'<table style="border-collapse: collapse;">'
    for field in form:
        s += u'''
        <tr>
            <th style="border:1px solid #ccc; text-align: left; padding: 0.6em;">{field_label}</th>
            <td style="border:1px solid #ccc; text-align: left; padding: 0.6em;">{field_value}</td>
        </tr>
        '''.format(field_label=field.label, field_value=form.cleaned_data.get(field.name, ''))
    s += u'</table>'
    return s

DEFAULT_EMAIL_SUBJECT = 'New Web Submission'

DEFAULT_EMAIL_TEXT = '''
<p>Hello <strong>{{ user }}</strong>,</p>
<p>Someone has submitted the contact form at <strong>{{ host }}</strong>:<br />
The request was submitted on <strong>{{ created|date }}</strong> at <strong>{{ created|time }}</strong>
from the IP address of <strong>{{ ip }}</strong>.</p>
<p>Request details:</p>
<p>{{ data }}</p>
<p>Truly yours,<br />
Mailer daemon @ <strong>{{ host }}</strong></p>'''


class Form(models.Model):
    name = models.CharField(max_length=255, unique=True)

    sender = models.EmailField(max_length=255, null=True, blank=True)
    sender_field = models.CharField(max_length=128, null=True, blank=True)

    email_subject = models.CharField(max_length=255, default=DEFAULT_EMAIL_SUBJECT)
    email_text = models.TextField(default=DEFAULT_EMAIL_TEXT)

    class Meta:
        ordering = ('id',)

    def __unicode__(self):
        return self.name

    def get_sender(self, form):
        if self.sender_field.strip():
            try:
                result = form.cleaned_data.get(self.sender_field.strip(), '')
                validate_email(result)
                return result
            except ValidationError:
                pass
        if self.sender:
            return self.sender
        # Get email from SiteElements
        try:
            return SiteElement.objects.get(key='email').value
        except SiteElement.DoesNotExist:
            pass
        return settings.FROM_EMAIL

    @staticmethod
    def handle_uploaded_file(f, date):
        filename, file_extension = os.path.splitext(f.name)
        dir_name = 'tmp'
        dest_dir = os.path.join(settings.MEDIA_ROOT, dir_name)
        filename = '%s_%s_%s' % (filename, date.strftime("%Y-%m-%d"), file_extension)
        filename_result = os.path.join(dest_dir, filename)
        fi = open(filename_result, 'wb+')
        for chunk in f.chunks():
            fi.write(chunk)
        return filename_result, filename

    def handle_form(self, request, form_class, file=None, file2=None, additional_context=None):
        if request.method == 'POST':
            f = form_class(request.POST, request.FILES)

            ip = request.META.get("REMOTE_ADDR", u"127.0.0.1")
            try:
                BlacklistItem.objects.get(ip=ip)
                return f, False
            except:
                pass
            if f.is_valid():
                history = History()
                history.form = self
                history.ip = request.META.get("REMOTE_ADDR", u"127.0.0.1")
                history.data = json.dumps([
                    (field.label, f.cleaned_data.get(k, '')) for k, field in f.fields.iteritems()
                    if not isinstance(field, forms.FileField)
                ])
                history.save()
                success_id = history.id
                table = create_form_table(f)
                data = {
                    'data': table,
                    'ip': history.ip,
                    'id': history.id,
                    'created': history.created,
                    'host': request.META.get('HTTP_HOST', 'your website'),
                }
                if additional_context:
                    data.update(additional_context)
                ctx = Context(data)
                try:
                    if file:
                        filename_result, filename = self.handle_uploaded_file(request.FILES[file], history.created)
                        history.file = os.path.join('tmp', filename)
                        history.save()
                    if file2:
                        filename_result2, filename2 = self.handle_uploaded_file(request.FILES[file2], history.created)
                        history.file2 = os.path.join('tmp', filename2)
                        history.save()
                    sender = self.get_sender(f)
                    for r in self.recipients.filter(active=True):
                        ctx['user'] = r.name or 'Admin'
                        subject = engines['django'].from_string(u'{% templatetag openblock %}% autoescape off %{% templatetag closeblock %}%s{% templatetag openblock %}% endautoescape %{% templatetag closeblock %}' % self.email_subject).render(ctx)
                        message = engines['django'].from_string(u'{% templatetag openblock %}% autoescape off %{% templatetag closeblock %}%s{% templatetag openblock %}% endautoescape %{% templatetag closeblock %}' % self.email_text).render(ctx)
                        msg = EmailMessage(subject, message, sender, [r.email])
                        if file:
                            msg.attach_file(filename_result)
                        if file2:
                            msg.attach_file(filename_result2)
                        msg.content_subtype = "html"
                        msg.send()
                except Exception, e:
                    import traceback
                    host = request.META.get('HTTP_HOST', 'Unknown host')
                    message = host + '\n\n' + unicode(e) + '\n\n' + traceback.format_exc()
                    mail_admins('Sending contact email failed.', message, fail_silently=True)

                return f, success_id
            else:
                print f.errors
        else:
            f = form_class()
        return f, False


class Recipient(models.Model):
    form = models.ForeignKey(Form, related_name='recipients')
    name = models.CharField(max_length=128, null=True, blank=True)
    email = models.EmailField()
    active = models.BooleanField(default=True)

    def __unicode__(self):
        return self.email


class History(models.Model):
    form = models.ForeignKey(Form)
    created = models.DateTimeField(auto_now_add=True)
    ip = models.CharField(max_length=128, null=True, blank=True)
    data = models.TextField(null=True, blank=True)
    file = models.FileField(upload_to='tmp', max_length=255, blank=True, null=True)
    file2 = models.FileField(upload_to='tmp', max_length=255, blank=True, null=True)

    def __unicode__(self):
        return 'Contact %s / %s' % (self.created, self.ip)

    def get_data(self):
        return json.loads(self.data)

    class Meta:
        ordering = ('-created',)
        verbose_name_plural = 'Contact History'
        verbose_name = 'Contact History'


class BlacklistItem(models.Model):
    ip = models.CharField(max_length=15)
    comment = models.TextField(null=True, blank=True)

    def __unicode__(self):
        return self.ip

    class Meta:
        verbose_name_plural = 'Blacklist'
        verbose_name = 'Blacklist item'
